.model small
.stack 100h
.data
    num1 db 8          
    num2 db 4          
    gcd_res db 0       
    lcm_res dw 0       
    msg db 'LCM is: $' 
.code
main:
    mov ax, @data
    mov ds, ax         
    mov al, num1
    mov bl, num2
    call gcd           
    mov gcd_res, al    
    mov al, num1       
    mov ah, 0          
    mov dl, num2       
    mul dl             
    mov cl, gcd_res    
    div cl             
    mov lcm_res, ax
    
    mov ah, 09h        
    lea dx, msg        
    int 21h
    
    mov ax, lcm_res  
    call print_num   
    mov ah, 4Ch
    int 21h

gcd proc
    cmp bl, 0
    je end_gcd        
gcd_loop:
    mov ah, 0
    div bl            
    mov al, bl        
    mov bl, ah        
    cmp bl, 0
    jne gcd_loop      
end_gcd:
    ret               
gcd endp

; Function to print a number in AX
print_num proc
    ; Divide the number by 10 and print each digit
    mov cx, 0          ; Clear CX (will store digits)
    mov bx, 10         ; Divisor for base-10
convert_loop:
    xor dx, dx         ; Clear DX before division
    div bx             ; AX / 10, quotient in AX, remainder in DX
    push dx            ; Save remainder (digit) on the stack
    inc cx             ; Increment digit count
    cmp ax, 0
    jne convert_loop   ; Repeat until the quotient is 0
print_digits:
    pop dx             ; Get digit from stack
    add dl, '0'        ; Convert digit to ASCII
    mov ah, 02h        ; DOS interrupt to print character
    int 21h
    loop print_digits  ; Repeat for all digits
    ret
print_num endp
end main
